// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file GetParameters.hpp
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef FAST_DDS_GENERATED__RCL_INTERFACES_SRV_GETPARAMETERS_HPP
#define FAST_DDS_GENERATED__RCL_INTERFACES_SRV_GETPARAMETERS_HPP

#include <cstdint>
#include <string>
#include <utility>
#include <vector>

#include <fastcdr/cdr/fixed_size_string.hpp>
#include "ParameterValue.hpp"

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(GETPARAMETERS_SOURCE)
#define GETPARAMETERS_DllAPI __declspec( dllexport )
#else
#define GETPARAMETERS_DllAPI __declspec( dllimport )
#endif // GETPARAMETERS_SOURCE
#else
#define GETPARAMETERS_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define GETPARAMETERS_DllAPI
#endif // _WIN32

namespace rcl_interfaces {

namespace srv {

/*!
 * @brief This class represents the structure GetParameters_Request defined by the user in the IDL file.
 * @ingroup GetParameters
 */
class GetParameters_Request
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport GetParameters_Request()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~GetParameters_Request()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object GetParameters_Request that will be copied.
     */
    eProsima_user_DllExport GetParameters_Request(
            const GetParameters_Request& x)
    {
                    m_names = x.m_names;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object GetParameters_Request that will be copied.
     */
    eProsima_user_DllExport GetParameters_Request(
            GetParameters_Request&& x) noexcept
    {
        m_names = std::move(x.m_names);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object GetParameters_Request that will be copied.
     */
    eProsima_user_DllExport GetParameters_Request& operator =(
            const GetParameters_Request& x)
    {

                    m_names = x.m_names;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object GetParameters_Request that will be copied.
     */
    eProsima_user_DllExport GetParameters_Request& operator =(
            GetParameters_Request&& x) noexcept
    {

        m_names = std::move(x.m_names);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x GetParameters_Request object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const GetParameters_Request& x) const
    {
        return (m_names == x.m_names);
    }

    /*!
     * @brief Comparison operator.
     * @param x GetParameters_Request object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const GetParameters_Request& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member names
     * @param _names New value to be copied in member names
     */
    eProsima_user_DllExport void names(
            const std::vector<std::string>& _names)
    {
        m_names = _names;
    }

    /*!
     * @brief This function moves the value in member names
     * @param _names New value to be moved in member names
     */
    eProsima_user_DllExport void names(
            std::vector<std::string>&& _names)
    {
        m_names = std::move(_names);
    }

    /*!
     * @brief This function returns a constant reference to member names
     * @return Constant reference to member names
     */
    eProsima_user_DllExport const std::vector<std::string>& names() const
    {
        return m_names;
    }

    /*!
     * @brief This function returns a reference to member names
     * @return Reference to member names
     */
    eProsima_user_DllExport std::vector<std::string>& names()
    {
        return m_names;
    }



private:

    std::vector<std::string> m_names;

};
/*!
 * @brief This class represents the structure GetParameters_Response defined by the user in the IDL file.
 * @ingroup GetParameters
 */
class GetParameters_Response
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport GetParameters_Response()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~GetParameters_Response()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object GetParameters_Response that will be copied.
     */
    eProsima_user_DllExport GetParameters_Response(
            const GetParameters_Response& x)
    {
                    m_values = x.m_values;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object GetParameters_Response that will be copied.
     */
    eProsima_user_DllExport GetParameters_Response(
            GetParameters_Response&& x) noexcept
    {
        m_values = std::move(x.m_values);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object GetParameters_Response that will be copied.
     */
    eProsima_user_DllExport GetParameters_Response& operator =(
            const GetParameters_Response& x)
    {

                    m_values = x.m_values;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object GetParameters_Response that will be copied.
     */
    eProsima_user_DllExport GetParameters_Response& operator =(
            GetParameters_Response&& x) noexcept
    {

        m_values = std::move(x.m_values);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x GetParameters_Response object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const GetParameters_Response& x) const
    {
        return (m_values == x.m_values);
    }

    /*!
     * @brief Comparison operator.
     * @param x GetParameters_Response object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const GetParameters_Response& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member values
     * @param _values New value to be copied in member values
     */
    eProsima_user_DllExport void values(
            const std::vector<rcl_interfaces::msg::ParameterValue>& _values)
    {
        m_values = _values;
    }

    /*!
     * @brief This function moves the value in member values
     * @param _values New value to be moved in member values
     */
    eProsima_user_DllExport void values(
            std::vector<rcl_interfaces::msg::ParameterValue>&& _values)
    {
        m_values = std::move(_values);
    }

    /*!
     * @brief This function returns a constant reference to member values
     * @return Constant reference to member values
     */
    eProsima_user_DllExport const std::vector<rcl_interfaces::msg::ParameterValue>& values() const
    {
        return m_values;
    }

    /*!
     * @brief This function returns a reference to member values
     * @return Reference to member values
     */
    eProsima_user_DllExport std::vector<rcl_interfaces::msg::ParameterValue>& values()
    {
        return m_values;
    }



private:

    std::vector<rcl_interfaces::msg::ParameterValue> m_values;

};

} // namespace srv

} // namespace rcl_interfaces

#endif // _FAST_DDS_GENERATED_RCL_INTERFACES_SRV_GETPARAMETERS_HPP_


