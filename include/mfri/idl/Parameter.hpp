// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file Parameter.hpp
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef FAST_DDS_GENERATED__RCL_INTERFACES_MSG_PARAMETER_HPP
#define FAST_DDS_GENERATED__RCL_INTERFACES_MSG_PARAMETER_HPP

#include <cstdint>
#include <string>
#include <utility>
#include <fastcdr/cdr/fixed_size_string.hpp>
#include "ParameterValue.hpp"

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(PARAMETER_SOURCE)
#define PARAMETER_DllAPI __declspec( dllexport )
#else
#define PARAMETER_DllAPI __declspec( dllimport )
#endif // PARAMETER_SOURCE
#else
#define PARAMETER_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define PARAMETER_DllAPI
#endif // _WIN32

namespace rcl_interfaces {

namespace msg {

/*!
 * @brief This class represents the structure Parameter defined by the user in the IDL file.
 * @ingroup Parameter
 */
class Parameter
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Parameter()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Parameter()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Parameter that will be copied.
     */
    eProsima_user_DllExport Parameter(
            const Parameter& x)
    {
                    m_name = x.m_name;

                    m_value = x.m_value;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Parameter that will be copied.
     */
    eProsima_user_DllExport Parameter(
            Parameter&& x) noexcept
    {
        m_name = std::move(x.m_name);
        m_value = std::move(x.m_value);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Parameter that will be copied.
     */
    eProsima_user_DllExport Parameter& operator =(
            const Parameter& x)
    {

                    m_name = x.m_name;

                    m_value = x.m_value;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Parameter that will be copied.
     */
    eProsima_user_DllExport Parameter& operator =(
            Parameter&& x) noexcept
    {

        m_name = std::move(x.m_name);
        m_value = std::move(x.m_value);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x Parameter object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const Parameter& x) const
    {
        return (m_name == x.m_name &&
           m_value == x.m_value);
    }

    /*!
     * @brief Comparison operator.
     * @param x Parameter object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const Parameter& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member name
     * @param _name New value to be copied in member name
     */
    eProsima_user_DllExport void name(
            const std::string& _name)
    {
        m_name = _name;
    }

    /*!
     * @brief This function moves the value in member name
     * @param _name New value to be moved in member name
     */
    eProsima_user_DllExport void name(
            std::string&& _name)
    {
        m_name = std::move(_name);
    }

    /*!
     * @brief This function returns a constant reference to member name
     * @return Constant reference to member name
     */
    eProsima_user_DllExport const std::string& name() const
    {
        return m_name;
    }

    /*!
     * @brief This function returns a reference to member name
     * @return Reference to member name
     */
    eProsima_user_DllExport std::string& name()
    {
        return m_name;
    }


    /*!
     * @brief This function copies the value in member value
     * @param _value New value to be copied in member value
     */
    eProsima_user_DllExport void value(
            const ParameterValue& _value)
    {
        m_value = _value;
    }

    /*!
     * @brief This function moves the value in member value
     * @param _value New value to be moved in member value
     */
    eProsima_user_DllExport void value(
            ParameterValue&& _value)
    {
        m_value = std::move(_value);
    }

    /*!
     * @brief This function returns a constant reference to member value
     * @return Constant reference to member value
     */
    eProsima_user_DllExport const ParameterValue& value() const
    {
        return m_value;
    }

    /*!
     * @brief This function returns a reference to member value
     * @return Reference to member value
     */
    eProsima_user_DllExport ParameterValue& value()
    {
        return m_value;
    }



private:

    std::string m_name;
    ParameterValue m_value;

};

} // namespace msg

} // namespace rcl_interfaces

#endif // _FAST_DDS_GENERATED_RCL_INTERFACES_MSG_PARAMETER_HPP_


