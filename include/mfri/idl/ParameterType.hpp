// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file ParameterType.hpp
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef FAST_DDS_GENERATED__RCL_INTERFACES_MSG_PARAMETERTYPE_HPP
#define FAST_DDS_GENERATED__RCL_INTERFACES_MSG_PARAMETERTYPE_HPP

#include <cstdint>
#include <utility>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(PARAMETERTYPE_SOURCE)
#define PARAMETERTYPE_DllAPI __declspec( dllexport )
#else
#define PARAMETERTYPE_DllAPI __declspec( dllimport )
#endif // PARAMETERTYPE_SOURCE
#else
#define PARAMETERTYPE_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define PARAMETERTYPE_DllAPI
#endif // _WIN32

namespace rcl_interfaces {

namespace msg {

namespace ParameterType_Constants {

const uint8_t PARAMETER_NOT_SET = 0;
const uint8_t PARAMETER_BOOL = 1;
const uint8_t PARAMETER_INTEGER = 2;
const uint8_t PARAMETER_DOUBLE = 3;
const uint8_t PARAMETER_STRING = 4;
const uint8_t PARAMETER_BYTE_ARRAY = 5;
const uint8_t PARAMETER_BOOL_ARRAY = 6;
const uint8_t PARAMETER_INTEGER_ARRAY = 7;
const uint8_t PARAMETER_DOUBLE_ARRAY = 8;
const uint8_t PARAMETER_STRING_ARRAY = 9;

} // namespace ParameterType_Constants
/*!
 * @brief This class represents the structure ParameterType defined by the user in the IDL file.
 * @ingroup ParameterType
 */
class ParameterType
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport ParameterType()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~ParameterType()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object ParameterType that will be copied.
     */
    eProsima_user_DllExport ParameterType(
            const ParameterType& x)
    {
                    m_structure_needs_at_least_one_member = x.m_structure_needs_at_least_one_member;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object ParameterType that will be copied.
     */
    eProsima_user_DllExport ParameterType(
            ParameterType&& x) noexcept
    {
        m_structure_needs_at_least_one_member = x.m_structure_needs_at_least_one_member;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object ParameterType that will be copied.
     */
    eProsima_user_DllExport ParameterType& operator =(
            const ParameterType& x)
    {

                    m_structure_needs_at_least_one_member = x.m_structure_needs_at_least_one_member;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object ParameterType that will be copied.
     */
    eProsima_user_DllExport ParameterType& operator =(
            ParameterType&& x) noexcept
    {

        m_structure_needs_at_least_one_member = x.m_structure_needs_at_least_one_member;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x ParameterType object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const ParameterType& x) const
    {
        return (m_structure_needs_at_least_one_member == x.m_structure_needs_at_least_one_member);
    }

    /*!
     * @brief Comparison operator.
     * @param x ParameterType object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const ParameterType& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets a value in member structure_needs_at_least_one_member
     * @param _structure_needs_at_least_one_member New value for member structure_needs_at_least_one_member
     */
    eProsima_user_DllExport void structure_needs_at_least_one_member(
            uint8_t _structure_needs_at_least_one_member)
    {
        m_structure_needs_at_least_one_member = _structure_needs_at_least_one_member;
    }

    /*!
     * @brief This function returns the value of member structure_needs_at_least_one_member
     * @return Value of member structure_needs_at_least_one_member
     */
    eProsima_user_DllExport uint8_t structure_needs_at_least_one_member() const
    {
        return m_structure_needs_at_least_one_member;
    }

    /*!
     * @brief This function returns a reference to member structure_needs_at_least_one_member
     * @return Reference to member structure_needs_at_least_one_member
     */
    eProsima_user_DllExport uint8_t& structure_needs_at_least_one_member()
    {
        return m_structure_needs_at_least_one_member;
    }



private:

    uint8_t m_structure_needs_at_least_one_member{0};

};

} // namespace msg

} // namespace rcl_interfaces

#endif // _FAST_DDS_GENERATED_RCL_INTERFACES_MSG_PARAMETERTYPE_HPP_


