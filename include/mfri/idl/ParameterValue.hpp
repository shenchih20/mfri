// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file ParameterValue.hpp
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef FAST_DDS_GENERATED__RCL_INTERFACES_MSG_PARAMETERVALUE_HPP
#define FAST_DDS_GENERATED__RCL_INTERFACES_MSG_PARAMETERVALUE_HPP

#include <cstdint>
#include <string>
#include <utility>
#include <vector>

#include <fastcdr/cdr/fixed_size_string.hpp>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(PARAMETERVALUE_SOURCE)
#define PARAMETERVALUE_DllAPI __declspec( dllexport )
#else
#define PARAMETERVALUE_DllAPI __declspec( dllimport )
#endif // PARAMETERVALUE_SOURCE
#else
#define PARAMETERVALUE_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define PARAMETERVALUE_DllAPI
#endif // _WIN32

namespace rcl_interfaces {

namespace msg {

/*!
 * @brief This class represents the structure ParameterValue defined by the user in the IDL file.
 * @ingroup ParameterValue
 */
class ParameterValue
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport ParameterValue()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~ParameterValue()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object ParameterValue that will be copied.
     */
    eProsima_user_DllExport ParameterValue(
            const ParameterValue& x)
    {
                    m_type = x.m_type;

                    m_bool_value = x.m_bool_value;

                    m_integer_value = x.m_integer_value;

                    m_double_value = x.m_double_value;

                    m_string_value = x.m_string_value;

                    m_byte_array_value = x.m_byte_array_value;

                    m_bool_array_value = x.m_bool_array_value;

                    m_integer_array_value = x.m_integer_array_value;

                    m_double_array_value = x.m_double_array_value;

                    m_string_array_value = x.m_string_array_value;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object ParameterValue that will be copied.
     */
    eProsima_user_DllExport ParameterValue(
            ParameterValue&& x) noexcept
    {
        m_type = x.m_type;
        m_bool_value = x.m_bool_value;
        m_integer_value = x.m_integer_value;
        m_double_value = x.m_double_value;
        m_string_value = std::move(x.m_string_value);
        m_byte_array_value = std::move(x.m_byte_array_value);
        m_bool_array_value = std::move(x.m_bool_array_value);
        m_integer_array_value = std::move(x.m_integer_array_value);
        m_double_array_value = std::move(x.m_double_array_value);
        m_string_array_value = std::move(x.m_string_array_value);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object ParameterValue that will be copied.
     */
    eProsima_user_DllExport ParameterValue& operator =(
            const ParameterValue& x)
    {

                    m_type = x.m_type;

                    m_bool_value = x.m_bool_value;

                    m_integer_value = x.m_integer_value;

                    m_double_value = x.m_double_value;

                    m_string_value = x.m_string_value;

                    m_byte_array_value = x.m_byte_array_value;

                    m_bool_array_value = x.m_bool_array_value;

                    m_integer_array_value = x.m_integer_array_value;

                    m_double_array_value = x.m_double_array_value;

                    m_string_array_value = x.m_string_array_value;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object ParameterValue that will be copied.
     */
    eProsima_user_DllExport ParameterValue& operator =(
            ParameterValue&& x) noexcept
    {

        m_type = x.m_type;
        m_bool_value = x.m_bool_value;
        m_integer_value = x.m_integer_value;
        m_double_value = x.m_double_value;
        m_string_value = std::move(x.m_string_value);
        m_byte_array_value = std::move(x.m_byte_array_value);
        m_bool_array_value = std::move(x.m_bool_array_value);
        m_integer_array_value = std::move(x.m_integer_array_value);
        m_double_array_value = std::move(x.m_double_array_value);
        m_string_array_value = std::move(x.m_string_array_value);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x ParameterValue object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const ParameterValue& x) const
    {
        return (m_type == x.m_type &&
           m_bool_value == x.m_bool_value &&
           m_integer_value == x.m_integer_value &&
           m_double_value == x.m_double_value &&
           m_string_value == x.m_string_value &&
           m_byte_array_value == x.m_byte_array_value &&
           m_bool_array_value == x.m_bool_array_value &&
           m_integer_array_value == x.m_integer_array_value &&
           m_double_array_value == x.m_double_array_value &&
           m_string_array_value == x.m_string_array_value);
    }

    /*!
     * @brief Comparison operator.
     * @param x ParameterValue object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const ParameterValue& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets a value in member type
     * @param _type New value for member type
     */
    eProsima_user_DllExport void type(
            uint8_t _type)
    {
        m_type = _type;
    }

    /*!
     * @brief This function returns the value of member type
     * @return Value of member type
     */
    eProsima_user_DllExport uint8_t type() const
    {
        return m_type;
    }

    /*!
     * @brief This function returns a reference to member type
     * @return Reference to member type
     */
    eProsima_user_DllExport uint8_t& type()
    {
        return m_type;
    }


    /*!
     * @brief This function sets a value in member bool_value
     * @param _bool_value New value for member bool_value
     */
    eProsima_user_DllExport void bool_value(
            bool _bool_value)
    {
        m_bool_value = _bool_value;
    }

    /*!
     * @brief This function returns the value of member bool_value
     * @return Value of member bool_value
     */
    eProsima_user_DllExport bool bool_value() const
    {
        return m_bool_value;
    }

    /*!
     * @brief This function returns a reference to member bool_value
     * @return Reference to member bool_value
     */
    eProsima_user_DllExport bool& bool_value()
    {
        return m_bool_value;
    }


    /*!
     * @brief This function sets a value in member integer_value
     * @param _integer_value New value for member integer_value
     */
    eProsima_user_DllExport void integer_value(
            int64_t _integer_value)
    {
        m_integer_value = _integer_value;
    }

    /*!
     * @brief This function returns the value of member integer_value
     * @return Value of member integer_value
     */
    eProsima_user_DllExport int64_t integer_value() const
    {
        return m_integer_value;
    }

    /*!
     * @brief This function returns a reference to member integer_value
     * @return Reference to member integer_value
     */
    eProsima_user_DllExport int64_t& integer_value()
    {
        return m_integer_value;
    }


    /*!
     * @brief This function sets a value in member double_value
     * @param _double_value New value for member double_value
     */
    eProsima_user_DllExport void double_value(
            double _double_value)
    {
        m_double_value = _double_value;
    }

    /*!
     * @brief This function returns the value of member double_value
     * @return Value of member double_value
     */
    eProsima_user_DllExport double double_value() const
    {
        return m_double_value;
    }

    /*!
     * @brief This function returns a reference to member double_value
     * @return Reference to member double_value
     */
    eProsima_user_DllExport double& double_value()
    {
        return m_double_value;
    }


    /*!
     * @brief This function copies the value in member string_value
     * @param _string_value New value to be copied in member string_value
     */
    eProsima_user_DllExport void string_value(
            const std::string& _string_value)
    {
        m_string_value = _string_value;
    }

    /*!
     * @brief This function moves the value in member string_value
     * @param _string_value New value to be moved in member string_value
     */
    eProsima_user_DllExport void string_value(
            std::string&& _string_value)
    {
        m_string_value = std::move(_string_value);
    }

    /*!
     * @brief This function returns a constant reference to member string_value
     * @return Constant reference to member string_value
     */
    eProsima_user_DllExport const std::string& string_value() const
    {
        return m_string_value;
    }

    /*!
     * @brief This function returns a reference to member string_value
     * @return Reference to member string_value
     */
    eProsima_user_DllExport std::string& string_value()
    {
        return m_string_value;
    }


    /*!
     * @brief This function copies the value in member byte_array_value
     * @param _byte_array_value New value to be copied in member byte_array_value
     */
    eProsima_user_DllExport void byte_array_value(
            const std::vector<uint8_t>& _byte_array_value)
    {
        m_byte_array_value = _byte_array_value;
    }

    /*!
     * @brief This function moves the value in member byte_array_value
     * @param _byte_array_value New value to be moved in member byte_array_value
     */
    eProsima_user_DllExport void byte_array_value(
            std::vector<uint8_t>&& _byte_array_value)
    {
        m_byte_array_value = std::move(_byte_array_value);
    }

    /*!
     * @brief This function returns a constant reference to member byte_array_value
     * @return Constant reference to member byte_array_value
     */
    eProsima_user_DllExport const std::vector<uint8_t>& byte_array_value() const
    {
        return m_byte_array_value;
    }

    /*!
     * @brief This function returns a reference to member byte_array_value
     * @return Reference to member byte_array_value
     */
    eProsima_user_DllExport std::vector<uint8_t>& byte_array_value()
    {
        return m_byte_array_value;
    }


    /*!
     * @brief This function copies the value in member bool_array_value
     * @param _bool_array_value New value to be copied in member bool_array_value
     */
    eProsima_user_DllExport void bool_array_value(
            const std::vector<bool>& _bool_array_value)
    {
        m_bool_array_value = _bool_array_value;
    }

    /*!
     * @brief This function moves the value in member bool_array_value
     * @param _bool_array_value New value to be moved in member bool_array_value
     */
    eProsima_user_DllExport void bool_array_value(
            std::vector<bool>&& _bool_array_value)
    {
        m_bool_array_value = std::move(_bool_array_value);
    }

    /*!
     * @brief This function returns a constant reference to member bool_array_value
     * @return Constant reference to member bool_array_value
     */
    eProsima_user_DllExport const std::vector<bool>& bool_array_value() const
    {
        return m_bool_array_value;
    }

    /*!
     * @brief This function returns a reference to member bool_array_value
     * @return Reference to member bool_array_value
     */
    eProsima_user_DllExport std::vector<bool>& bool_array_value()
    {
        return m_bool_array_value;
    }


    /*!
     * @brief This function copies the value in member integer_array_value
     * @param _integer_array_value New value to be copied in member integer_array_value
     */
    eProsima_user_DllExport void integer_array_value(
            const std::vector<int64_t>& _integer_array_value)
    {
        m_integer_array_value = _integer_array_value;
    }

    /*!
     * @brief This function moves the value in member integer_array_value
     * @param _integer_array_value New value to be moved in member integer_array_value
     */
    eProsima_user_DllExport void integer_array_value(
            std::vector<int64_t>&& _integer_array_value)
    {
        m_integer_array_value = std::move(_integer_array_value);
    }

    /*!
     * @brief This function returns a constant reference to member integer_array_value
     * @return Constant reference to member integer_array_value
     */
    eProsima_user_DllExport const std::vector<int64_t>& integer_array_value() const
    {
        return m_integer_array_value;
    }

    /*!
     * @brief This function returns a reference to member integer_array_value
     * @return Reference to member integer_array_value
     */
    eProsima_user_DllExport std::vector<int64_t>& integer_array_value()
    {
        return m_integer_array_value;
    }


    /*!
     * @brief This function copies the value in member double_array_value
     * @param _double_array_value New value to be copied in member double_array_value
     */
    eProsima_user_DllExport void double_array_value(
            const std::vector<double>& _double_array_value)
    {
        m_double_array_value = _double_array_value;
    }

    /*!
     * @brief This function moves the value in member double_array_value
     * @param _double_array_value New value to be moved in member double_array_value
     */
    eProsima_user_DllExport void double_array_value(
            std::vector<double>&& _double_array_value)
    {
        m_double_array_value = std::move(_double_array_value);
    }

    /*!
     * @brief This function returns a constant reference to member double_array_value
     * @return Constant reference to member double_array_value
     */
    eProsima_user_DllExport const std::vector<double>& double_array_value() const
    {
        return m_double_array_value;
    }

    /*!
     * @brief This function returns a reference to member double_array_value
     * @return Reference to member double_array_value
     */
    eProsima_user_DllExport std::vector<double>& double_array_value()
    {
        return m_double_array_value;
    }


    /*!
     * @brief This function copies the value in member string_array_value
     * @param _string_array_value New value to be copied in member string_array_value
     */
    eProsima_user_DllExport void string_array_value(
            const std::vector<std::string>& _string_array_value)
    {
        m_string_array_value = _string_array_value;
    }

    /*!
     * @brief This function moves the value in member string_array_value
     * @param _string_array_value New value to be moved in member string_array_value
     */
    eProsima_user_DllExport void string_array_value(
            std::vector<std::string>&& _string_array_value)
    {
        m_string_array_value = std::move(_string_array_value);
    }

    /*!
     * @brief This function returns a constant reference to member string_array_value
     * @return Constant reference to member string_array_value
     */
    eProsima_user_DllExport const std::vector<std::string>& string_array_value() const
    {
        return m_string_array_value;
    }

    /*!
     * @brief This function returns a reference to member string_array_value
     * @return Reference to member string_array_value
     */
    eProsima_user_DllExport std::vector<std::string>& string_array_value()
    {
        return m_string_array_value;
    }



private:

    uint8_t m_type{0};
    bool m_bool_value{false};
    int64_t m_integer_value{0};
    double m_double_value{0.0};
    std::string m_string_value;
    std::vector<uint8_t> m_byte_array_value;
    std::vector<bool> m_bool_array_value;
    std::vector<int64_t> m_integer_array_value;
    std::vector<double> m_double_array_value;
    std::vector<std::string> m_string_array_value;

};

} // namespace msg

} // namespace rcl_interfaces

#endif // _FAST_DDS_GENERATED_RCL_INTERFACES_MSG_PARAMETERVALUE_HPP_


