// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file SetParameters.hpp
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef FAST_DDS_GENERATED__RCL_INTERFACES_SRV_SETPARAMETERS_HPP
#define FAST_DDS_GENERATED__RCL_INTERFACES_SRV_SETPARAMETERS_HPP

#include <cstdint>
#include <utility>
#include <vector>

#include "Parameter.hpp"
#include "SetParametersResult.hpp"

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(SETPARAMETERS_SOURCE)
#define SETPARAMETERS_DllAPI __declspec( dllexport )
#else
#define SETPARAMETERS_DllAPI __declspec( dllimport )
#endif // SETPARAMETERS_SOURCE
#else
#define SETPARAMETERS_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define SETPARAMETERS_DllAPI
#endif // _WIN32

namespace rcl_interfaces {

namespace srv {

/*!
 * @brief This class represents the structure SetParameters_Request defined by the user in the IDL file.
 * @ingroup SetParameters
 */
class SetParameters_Request
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport SetParameters_Request()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~SetParameters_Request()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object SetParameters_Request that will be copied.
     */
    eProsima_user_DllExport SetParameters_Request(
            const SetParameters_Request& x)
    {
                    m_parameters = x.m_parameters;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object SetParameters_Request that will be copied.
     */
    eProsima_user_DllExport SetParameters_Request(
            SetParameters_Request&& x) noexcept
    {
        m_parameters = std::move(x.m_parameters);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object SetParameters_Request that will be copied.
     */
    eProsima_user_DllExport SetParameters_Request& operator =(
            const SetParameters_Request& x)
    {

                    m_parameters = x.m_parameters;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object SetParameters_Request that will be copied.
     */
    eProsima_user_DllExport SetParameters_Request& operator =(
            SetParameters_Request&& x) noexcept
    {

        m_parameters = std::move(x.m_parameters);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x SetParameters_Request object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const SetParameters_Request& x) const
    {
        return (m_parameters == x.m_parameters);
    }

    /*!
     * @brief Comparison operator.
     * @param x SetParameters_Request object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const SetParameters_Request& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member parameters
     * @param _parameters New value to be copied in member parameters
     */
    eProsima_user_DllExport void parameters(
            const std::vector<rcl_interfaces::msg::Parameter>& _parameters)
    {
        m_parameters = _parameters;
    }

    /*!
     * @brief This function moves the value in member parameters
     * @param _parameters New value to be moved in member parameters
     */
    eProsima_user_DllExport void parameters(
            std::vector<rcl_interfaces::msg::Parameter>&& _parameters)
    {
        m_parameters = std::move(_parameters);
    }

    /*!
     * @brief This function returns a constant reference to member parameters
     * @return Constant reference to member parameters
     */
    eProsima_user_DllExport const std::vector<rcl_interfaces::msg::Parameter>& parameters() const
    {
        return m_parameters;
    }

    /*!
     * @brief This function returns a reference to member parameters
     * @return Reference to member parameters
     */
    eProsima_user_DllExport std::vector<rcl_interfaces::msg::Parameter>& parameters()
    {
        return m_parameters;
    }



private:

    std::vector<rcl_interfaces::msg::Parameter> m_parameters;

};
/*!
 * @brief This class represents the structure SetParameters_Response defined by the user in the IDL file.
 * @ingroup SetParameters
 */
class SetParameters_Response
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport SetParameters_Response()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~SetParameters_Response()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object SetParameters_Response that will be copied.
     */
    eProsima_user_DllExport SetParameters_Response(
            const SetParameters_Response& x)
    {
                    m_results = x.m_results;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object SetParameters_Response that will be copied.
     */
    eProsima_user_DllExport SetParameters_Response(
            SetParameters_Response&& x) noexcept
    {
        m_results = std::move(x.m_results);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object SetParameters_Response that will be copied.
     */
    eProsima_user_DllExport SetParameters_Response& operator =(
            const SetParameters_Response& x)
    {

                    m_results = x.m_results;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object SetParameters_Response that will be copied.
     */
    eProsima_user_DllExport SetParameters_Response& operator =(
            SetParameters_Response&& x) noexcept
    {

        m_results = std::move(x.m_results);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x SetParameters_Response object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const SetParameters_Response& x) const
    {
        return (m_results == x.m_results);
    }

    /*!
     * @brief Comparison operator.
     * @param x SetParameters_Response object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const SetParameters_Response& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member results
     * @param _results New value to be copied in member results
     */
    eProsima_user_DllExport void results(
            const std::vector<rcl_interfaces::msg::SetParametersResult>& _results)
    {
        m_results = _results;
    }

    /*!
     * @brief This function moves the value in member results
     * @param _results New value to be moved in member results
     */
    eProsima_user_DllExport void results(
            std::vector<rcl_interfaces::msg::SetParametersResult>&& _results)
    {
        m_results = std::move(_results);
    }

    /*!
     * @brief This function returns a constant reference to member results
     * @return Constant reference to member results
     */
    eProsima_user_DllExport const std::vector<rcl_interfaces::msg::SetParametersResult>& results() const
    {
        return m_results;
    }

    /*!
     * @brief This function returns a reference to member results
     * @return Reference to member results
     */
    eProsima_user_DllExport std::vector<rcl_interfaces::msg::SetParametersResult>& results()
    {
        return m_results;
    }



private:

    std::vector<rcl_interfaces::msg::SetParametersResult> m_results;

};

} // namespace srv

} // namespace rcl_interfaces

#endif // _FAST_DDS_GENERATED_RCL_INTERFACES_SRV_SETPARAMETERS_HPP_


