// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file SetParametersResult.hpp
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef FAST_DDS_GENERATED__RCL_INTERFACES_MSG_SETPARAMETERSRESULT_HPP
#define FAST_DDS_GENERATED__RCL_INTERFACES_MSG_SETPARAMETERSRESULT_HPP

#include <cstdint>
#include <string>
#include <utility>
#include <fastcdr/cdr/fixed_size_string.hpp>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(SETPARAMETERSRESULT_SOURCE)
#define SETPARAMETERSRESULT_DllAPI __declspec( dllexport )
#else
#define SETPARAMETERSRESULT_DllAPI __declspec( dllimport )
#endif // SETPARAMETERSRESULT_SOURCE
#else
#define SETPARAMETERSRESULT_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define SETPARAMETERSRESULT_DllAPI
#endif // _WIN32

namespace rcl_interfaces {

namespace msg {

/*!
 * @brief This class represents the structure SetParametersResult defined by the user in the IDL file.
 * @ingroup SetParametersResult
 */
class SetParametersResult
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport SetParametersResult()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~SetParametersResult()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object SetParametersResult that will be copied.
     */
    eProsima_user_DllExport SetParametersResult(
            const SetParametersResult& x)
    {
                    m_successful = x.m_successful;

                    m_reason = x.m_reason;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object SetParametersResult that will be copied.
     */
    eProsima_user_DllExport SetParametersResult(
            SetParametersResult&& x) noexcept
    {
        m_successful = x.m_successful;
        m_reason = std::move(x.m_reason);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object SetParametersResult that will be copied.
     */
    eProsima_user_DllExport SetParametersResult& operator =(
            const SetParametersResult& x)
    {

                    m_successful = x.m_successful;

                    m_reason = x.m_reason;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object SetParametersResult that will be copied.
     */
    eProsima_user_DllExport SetParametersResult& operator =(
            SetParametersResult&& x) noexcept
    {

        m_successful = x.m_successful;
        m_reason = std::move(x.m_reason);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x SetParametersResult object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const SetParametersResult& x) const
    {
        return (m_successful == x.m_successful &&
           m_reason == x.m_reason);
    }

    /*!
     * @brief Comparison operator.
     * @param x SetParametersResult object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const SetParametersResult& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets a value in member successful
     * @param _successful New value for member successful
     */
    eProsima_user_DllExport void successful(
            bool _successful)
    {
        m_successful = _successful;
    }

    /*!
     * @brief This function returns the value of member successful
     * @return Value of member successful
     */
    eProsima_user_DllExport bool successful() const
    {
        return m_successful;
    }

    /*!
     * @brief This function returns a reference to member successful
     * @return Reference to member successful
     */
    eProsima_user_DllExport bool& successful()
    {
        return m_successful;
    }


    /*!
     * @brief This function copies the value in member reason
     * @param _reason New value to be copied in member reason
     */
    eProsima_user_DllExport void reason(
            const std::string& _reason)
    {
        m_reason = _reason;
    }

    /*!
     * @brief This function moves the value in member reason
     * @param _reason New value to be moved in member reason
     */
    eProsima_user_DllExport void reason(
            std::string&& _reason)
    {
        m_reason = std::move(_reason);
    }

    /*!
     * @brief This function returns a constant reference to member reason
     * @return Constant reference to member reason
     */
    eProsima_user_DllExport const std::string& reason() const
    {
        return m_reason;
    }

    /*!
     * @brief This function returns a reference to member reason
     * @return Reference to member reason
     */
    eProsima_user_DllExport std::string& reason()
    {
        return m_reason;
    }



private:

    bool m_successful{false};
    std::string m_reason;

};

} // namespace msg

} // namespace rcl_interfaces

#endif // _FAST_DDS_GENERATED_RCL_INTERFACES_MSG_SETPARAMETERSRESULT_HPP_


