// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file ParameterValueTypeObjectSupport.cxx
 * Source file containing the implementation to register the TypeObject representation of the described types in the IDL file
 *
 * This file was generated by the tool fastddsgen.
 */

#include "ParameterValueTypeObjectSupport.hpp"

#include <mutex>
#include <string>

#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>
#include <fastdds/dds/domain/DomainParticipantFactory.hpp>
#include <fastdds/dds/log/Log.hpp>
#include <fastdds/dds/xtypes/common.hpp>
#include <fastdds/dds/xtypes/type_representation/ITypeObjectRegistry.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObject.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObjectUtils.hpp>

#include "ParameterValue.hpp"


using namespace eprosima::fastdds::dds::xtypes;

namespace rcl_interfaces {
namespace msg {
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_ParameterValue_type_identifier(
        TypeIdentifierPair& type_ids_ParameterValue)
{

    ReturnCode_t return_code_ParameterValue {eprosima::fastdds::dds::RETCODE_OK};
    return_code_ParameterValue =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "rcl_interfaces::msg::ParameterValue", type_ids_ParameterValue);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_ParameterValue)
    {
        StructTypeFlag struct_flags_ParameterValue = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_ParameterValue = "rcl_interfaces::msg::ParameterValue";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_ParameterValue;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_ParameterValue;
        CompleteTypeDetail detail_ParameterValue = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_ParameterValue, ann_custom_ParameterValue, type_name_ParameterValue.to_string());
        CompleteStructHeader header_ParameterValue;
        header_ParameterValue = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_ParameterValue);
        CompleteStructMemberSeq member_seq_ParameterValue;
        {
            TypeIdentifierPair type_ids_type;
            ReturnCode_t return_code_type {eprosima::fastdds::dds::RETCODE_OK};
            return_code_type =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_uint8_t", type_ids_type);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_type)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "type Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_type = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_type = 0x00000000;
            bool common_type_ec {false};
            CommonStructMember common_type {TypeObjectUtils::build_common_struct_member(member_id_type, member_flags_type, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_type, common_type_ec))};
            if (!common_type_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure type member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_type = "type";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_type;
            ann_custom_ParameterValue.reset();
            CompleteMemberDetail detail_type = TypeObjectUtils::build_complete_member_detail(name_type, member_ann_builtin_type, ann_custom_ParameterValue);
            CompleteStructMember member_type = TypeObjectUtils::build_complete_struct_member(common_type, detail_type);
            TypeObjectUtils::add_complete_struct_member(member_seq_ParameterValue, member_type);
        }
        {
            TypeIdentifierPair type_ids_bool_value;
            ReturnCode_t return_code_bool_value {eprosima::fastdds::dds::RETCODE_OK};
            return_code_bool_value =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_bool", type_ids_bool_value);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_bool_value)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "bool_value Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_bool_value = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_bool_value = 0x00000001;
            bool common_bool_value_ec {false};
            CommonStructMember common_bool_value {TypeObjectUtils::build_common_struct_member(member_id_bool_value, member_flags_bool_value, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_bool_value, common_bool_value_ec))};
            if (!common_bool_value_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure bool_value member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_bool_value = "bool_value";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_bool_value;
            ann_custom_ParameterValue.reset();
            CompleteMemberDetail detail_bool_value = TypeObjectUtils::build_complete_member_detail(name_bool_value, member_ann_builtin_bool_value, ann_custom_ParameterValue);
            CompleteStructMember member_bool_value = TypeObjectUtils::build_complete_struct_member(common_bool_value, detail_bool_value);
            TypeObjectUtils::add_complete_struct_member(member_seq_ParameterValue, member_bool_value);
        }
        {
            TypeIdentifierPair type_ids_integer_value;
            ReturnCode_t return_code_integer_value {eprosima::fastdds::dds::RETCODE_OK};
            return_code_integer_value =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int64_t", type_ids_integer_value);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_integer_value)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "integer_value Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_integer_value = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_integer_value = 0x00000002;
            bool common_integer_value_ec {false};
            CommonStructMember common_integer_value {TypeObjectUtils::build_common_struct_member(member_id_integer_value, member_flags_integer_value, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_integer_value, common_integer_value_ec))};
            if (!common_integer_value_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure integer_value member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_integer_value = "integer_value";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_integer_value;
            ann_custom_ParameterValue.reset();
            CompleteMemberDetail detail_integer_value = TypeObjectUtils::build_complete_member_detail(name_integer_value, member_ann_builtin_integer_value, ann_custom_ParameterValue);
            CompleteStructMember member_integer_value = TypeObjectUtils::build_complete_struct_member(common_integer_value, detail_integer_value);
            TypeObjectUtils::add_complete_struct_member(member_seq_ParameterValue, member_integer_value);
        }
        {
            TypeIdentifierPair type_ids_double_value;
            ReturnCode_t return_code_double_value {eprosima::fastdds::dds::RETCODE_OK};
            return_code_double_value =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_double", type_ids_double_value);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_double_value)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "double_value Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_double_value = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_double_value = 0x00000003;
            bool common_double_value_ec {false};
            CommonStructMember common_double_value {TypeObjectUtils::build_common_struct_member(member_id_double_value, member_flags_double_value, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_double_value, common_double_value_ec))};
            if (!common_double_value_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure double_value member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_double_value = "double_value";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_double_value;
            ann_custom_ParameterValue.reset();
            CompleteMemberDetail detail_double_value = TypeObjectUtils::build_complete_member_detail(name_double_value, member_ann_builtin_double_value, ann_custom_ParameterValue);
            CompleteStructMember member_double_value = TypeObjectUtils::build_complete_struct_member(common_double_value, detail_double_value);
            TypeObjectUtils::add_complete_struct_member(member_seq_ParameterValue, member_double_value);
        }
        {
            TypeIdentifierPair type_ids_string_value;
            ReturnCode_t return_code_string_value {eprosima::fastdds::dds::RETCODE_OK};
            return_code_string_value =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_string_value);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_string_value)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_string_value))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_string_value = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_string_value = 0x00000004;
            bool common_string_value_ec {false};
            CommonStructMember common_string_value {TypeObjectUtils::build_common_struct_member(member_id_string_value, member_flags_string_value, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_string_value, common_string_value_ec))};
            if (!common_string_value_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure string_value member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_string_value = "string_value";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_string_value;
            ann_custom_ParameterValue.reset();
            CompleteMemberDetail detail_string_value = TypeObjectUtils::build_complete_member_detail(name_string_value, member_ann_builtin_string_value, ann_custom_ParameterValue);
            CompleteStructMember member_string_value = TypeObjectUtils::build_complete_struct_member(common_string_value, detail_string_value);
            TypeObjectUtils::add_complete_struct_member(member_seq_ParameterValue, member_string_value);
        }
        {
            TypeIdentifierPair type_ids_byte_array_value;
            ReturnCode_t return_code_byte_array_value {eprosima::fastdds::dds::RETCODE_OK};
            return_code_byte_array_value =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_sequence_byte_unbounded", type_ids_byte_array_value);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_byte_array_value)
            {
                return_code_byte_array_value =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_byte", type_ids_byte_array_value);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_byte_array_value)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Sequence element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_sequence_byte_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_sequence_byte_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_byte_array_value, element_identifier_anonymous_sequence_byte_unbounded_ec))};
                if (!element_identifier_anonymous_sequence_byte_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Sequence element TypeIdentifier inconsistent.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_sequence_byte_unbounded = EK_COMPLETE;
                if (TK_NONE == type_ids_byte_array_value.type_identifier2()._d())
                {
                    equiv_kind_anonymous_sequence_byte_unbounded = EK_BOTH;
                }
                CollectionElementFlag element_flags_anonymous_sequence_byte_unbounded = 0;
                PlainCollectionHeader header_anonymous_sequence_byte_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_sequence_byte_unbounded, element_flags_anonymous_sequence_byte_unbounded);
                {
                    SBound bound = 0;
                    PlainSequenceSElemDefn seq_sdefn = TypeObjectUtils::build_plain_sequence_s_elem_defn(header_anonymous_sequence_byte_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_byte_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_sequence_type_identifier(seq_sdefn, "anonymous_sequence_byte_unbounded", type_ids_byte_array_value))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_byte_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_byte_array_value = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_byte_array_value = 0x00000005;
            bool common_byte_array_value_ec {false};
            CommonStructMember common_byte_array_value {TypeObjectUtils::build_common_struct_member(member_id_byte_array_value, member_flags_byte_array_value, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_byte_array_value, common_byte_array_value_ec))};
            if (!common_byte_array_value_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure byte_array_value member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_byte_array_value = "byte_array_value";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_byte_array_value;
            ann_custom_ParameterValue.reset();
            CompleteMemberDetail detail_byte_array_value = TypeObjectUtils::build_complete_member_detail(name_byte_array_value, member_ann_builtin_byte_array_value, ann_custom_ParameterValue);
            CompleteStructMember member_byte_array_value = TypeObjectUtils::build_complete_struct_member(common_byte_array_value, detail_byte_array_value);
            TypeObjectUtils::add_complete_struct_member(member_seq_ParameterValue, member_byte_array_value);
        }
        {
            TypeIdentifierPair type_ids_bool_array_value;
            ReturnCode_t return_code_bool_array_value {eprosima::fastdds::dds::RETCODE_OK};
            return_code_bool_array_value =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_sequence_bool_unbounded", type_ids_bool_array_value);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_bool_array_value)
            {
                return_code_bool_array_value =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_bool", type_ids_bool_array_value);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_bool_array_value)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Sequence element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_sequence_bool_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_sequence_bool_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_bool_array_value, element_identifier_anonymous_sequence_bool_unbounded_ec))};
                if (!element_identifier_anonymous_sequence_bool_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Sequence element TypeIdentifier inconsistent.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_sequence_bool_unbounded = EK_COMPLETE;
                if (TK_NONE == type_ids_bool_array_value.type_identifier2()._d())
                {
                    equiv_kind_anonymous_sequence_bool_unbounded = EK_BOTH;
                }
                CollectionElementFlag element_flags_anonymous_sequence_bool_unbounded = 0;
                PlainCollectionHeader header_anonymous_sequence_bool_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_sequence_bool_unbounded, element_flags_anonymous_sequence_bool_unbounded);
                {
                    SBound bound = 0;
                    PlainSequenceSElemDefn seq_sdefn = TypeObjectUtils::build_plain_sequence_s_elem_defn(header_anonymous_sequence_bool_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_bool_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_sequence_type_identifier(seq_sdefn, "anonymous_sequence_bool_unbounded", type_ids_bool_array_value))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_bool_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_bool_array_value = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_bool_array_value = 0x00000006;
            bool common_bool_array_value_ec {false};
            CommonStructMember common_bool_array_value {TypeObjectUtils::build_common_struct_member(member_id_bool_array_value, member_flags_bool_array_value, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_bool_array_value, common_bool_array_value_ec))};
            if (!common_bool_array_value_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure bool_array_value member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_bool_array_value = "bool_array_value";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_bool_array_value;
            ann_custom_ParameterValue.reset();
            CompleteMemberDetail detail_bool_array_value = TypeObjectUtils::build_complete_member_detail(name_bool_array_value, member_ann_builtin_bool_array_value, ann_custom_ParameterValue);
            CompleteStructMember member_bool_array_value = TypeObjectUtils::build_complete_struct_member(common_bool_array_value, detail_bool_array_value);
            TypeObjectUtils::add_complete_struct_member(member_seq_ParameterValue, member_bool_array_value);
        }
        {
            TypeIdentifierPair type_ids_integer_array_value;
            ReturnCode_t return_code_integer_array_value {eprosima::fastdds::dds::RETCODE_OK};
            return_code_integer_array_value =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_sequence_int64_t_unbounded", type_ids_integer_array_value);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_integer_array_value)
            {
                return_code_integer_array_value =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int64_t", type_ids_integer_array_value);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_integer_array_value)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Sequence element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_sequence_int64_t_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_sequence_int64_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_integer_array_value, element_identifier_anonymous_sequence_int64_t_unbounded_ec))};
                if (!element_identifier_anonymous_sequence_int64_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Sequence element TypeIdentifier inconsistent.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_sequence_int64_t_unbounded = EK_COMPLETE;
                if (TK_NONE == type_ids_integer_array_value.type_identifier2()._d())
                {
                    equiv_kind_anonymous_sequence_int64_t_unbounded = EK_BOTH;
                }
                CollectionElementFlag element_flags_anonymous_sequence_int64_t_unbounded = 0;
                PlainCollectionHeader header_anonymous_sequence_int64_t_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_sequence_int64_t_unbounded, element_flags_anonymous_sequence_int64_t_unbounded);
                {
                    SBound bound = 0;
                    PlainSequenceSElemDefn seq_sdefn = TypeObjectUtils::build_plain_sequence_s_elem_defn(header_anonymous_sequence_int64_t_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_int64_t_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_sequence_type_identifier(seq_sdefn, "anonymous_sequence_int64_t_unbounded", type_ids_integer_array_value))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_int64_t_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_integer_array_value = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_integer_array_value = 0x00000007;
            bool common_integer_array_value_ec {false};
            CommonStructMember common_integer_array_value {TypeObjectUtils::build_common_struct_member(member_id_integer_array_value, member_flags_integer_array_value, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_integer_array_value, common_integer_array_value_ec))};
            if (!common_integer_array_value_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure integer_array_value member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_integer_array_value = "integer_array_value";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_integer_array_value;
            ann_custom_ParameterValue.reset();
            CompleteMemberDetail detail_integer_array_value = TypeObjectUtils::build_complete_member_detail(name_integer_array_value, member_ann_builtin_integer_array_value, ann_custom_ParameterValue);
            CompleteStructMember member_integer_array_value = TypeObjectUtils::build_complete_struct_member(common_integer_array_value, detail_integer_array_value);
            TypeObjectUtils::add_complete_struct_member(member_seq_ParameterValue, member_integer_array_value);
        }
        {
            TypeIdentifierPair type_ids_double_array_value;
            ReturnCode_t return_code_double_array_value {eprosima::fastdds::dds::RETCODE_OK};
            return_code_double_array_value =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_sequence_double_unbounded", type_ids_double_array_value);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_double_array_value)
            {
                return_code_double_array_value =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_double", type_ids_double_array_value);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_double_array_value)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Sequence element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_sequence_double_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_sequence_double_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_double_array_value, element_identifier_anonymous_sequence_double_unbounded_ec))};
                if (!element_identifier_anonymous_sequence_double_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Sequence element TypeIdentifier inconsistent.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_sequence_double_unbounded = EK_COMPLETE;
                if (TK_NONE == type_ids_double_array_value.type_identifier2()._d())
                {
                    equiv_kind_anonymous_sequence_double_unbounded = EK_BOTH;
                }
                CollectionElementFlag element_flags_anonymous_sequence_double_unbounded = 0;
                PlainCollectionHeader header_anonymous_sequence_double_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_sequence_double_unbounded, element_flags_anonymous_sequence_double_unbounded);
                {
                    SBound bound = 0;
                    PlainSequenceSElemDefn seq_sdefn = TypeObjectUtils::build_plain_sequence_s_elem_defn(header_anonymous_sequence_double_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_double_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_sequence_type_identifier(seq_sdefn, "anonymous_sequence_double_unbounded", type_ids_double_array_value))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_double_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_double_array_value = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_double_array_value = 0x00000008;
            bool common_double_array_value_ec {false};
            CommonStructMember common_double_array_value {TypeObjectUtils::build_common_struct_member(member_id_double_array_value, member_flags_double_array_value, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_double_array_value, common_double_array_value_ec))};
            if (!common_double_array_value_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure double_array_value member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_double_array_value = "double_array_value";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_double_array_value;
            ann_custom_ParameterValue.reset();
            CompleteMemberDetail detail_double_array_value = TypeObjectUtils::build_complete_member_detail(name_double_array_value, member_ann_builtin_double_array_value, ann_custom_ParameterValue);
            CompleteStructMember member_double_array_value = TypeObjectUtils::build_complete_struct_member(common_double_array_value, detail_double_array_value);
            TypeObjectUtils::add_complete_struct_member(member_seq_ParameterValue, member_double_array_value);
        }
        {
            TypeIdentifierPair type_ids_string_array_value;
            ReturnCode_t return_code_string_array_value {eprosima::fastdds::dds::RETCODE_OK};
            return_code_string_array_value =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_sequence_anonymous_string_unbounded_unbounded", type_ids_string_array_value);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_string_array_value)
            {
                return_code_string_array_value =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_string_unbounded", type_ids_string_array_value);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_string_array_value)
                {
                    {
                        SBound bound = 0;
                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                "anonymous_string_unbounded", type_ids_string_array_value))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                }
                bool element_identifier_anonymous_sequence_anonymous_string_unbounded_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_sequence_anonymous_string_unbounded_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_string_array_value, element_identifier_anonymous_sequence_anonymous_string_unbounded_unbounded_ec))};
                if (!element_identifier_anonymous_sequence_anonymous_string_unbounded_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Sequence element TypeIdentifier inconsistent.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_sequence_anonymous_string_unbounded_unbounded = EK_COMPLETE;
                if (TK_NONE == type_ids_string_array_value.type_identifier2()._d())
                {
                    equiv_kind_anonymous_sequence_anonymous_string_unbounded_unbounded = EK_BOTH;
                }
                CollectionElementFlag element_flags_anonymous_sequence_anonymous_string_unbounded_unbounded = 0;
                PlainCollectionHeader header_anonymous_sequence_anonymous_string_unbounded_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_sequence_anonymous_string_unbounded_unbounded, element_flags_anonymous_sequence_anonymous_string_unbounded_unbounded);
                {
                    SBound bound = 0;
                    PlainSequenceSElemDefn seq_sdefn = TypeObjectUtils::build_plain_sequence_s_elem_defn(header_anonymous_sequence_anonymous_string_unbounded_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_anonymous_string_unbounded_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_sequence_type_identifier(seq_sdefn, "anonymous_sequence_anonymous_string_unbounded_unbounded", type_ids_string_array_value))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_anonymous_string_unbounded_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_string_array_value = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_string_array_value = 0x00000009;
            bool common_string_array_value_ec {false};
            CommonStructMember common_string_array_value {TypeObjectUtils::build_common_struct_member(member_id_string_array_value, member_flags_string_array_value, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_string_array_value, common_string_array_value_ec))};
            if (!common_string_array_value_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure string_array_value member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_string_array_value = "string_array_value";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_string_array_value;
            ann_custom_ParameterValue.reset();
            CompleteMemberDetail detail_string_array_value = TypeObjectUtils::build_complete_member_detail(name_string_array_value, member_ann_builtin_string_array_value, ann_custom_ParameterValue);
            CompleteStructMember member_string_array_value = TypeObjectUtils::build_complete_struct_member(common_string_array_value, detail_string_array_value);
            TypeObjectUtils::add_complete_struct_member(member_seq_ParameterValue, member_string_array_value);
        }
        CompleteStructType struct_type_ParameterValue = TypeObjectUtils::build_complete_struct_type(struct_flags_ParameterValue, header_ParameterValue, member_seq_ParameterValue);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_ParameterValue, type_name_ParameterValue.to_string(), type_ids_ParameterValue))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "rcl_interfaces::msg::ParameterValue already registered in TypeObjectRegistry for a different type.");
        }
    }
}

} // namespace msg

} // namespace rcl_interfaces

