// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file SetParametersResultTypeObjectSupport.cxx
 * Source file containing the implementation to register the TypeObject representation of the described types in the IDL file
 *
 * This file was generated by the tool fastddsgen.
 */

#include "SetParametersResultTypeObjectSupport.hpp"

#include <mutex>
#include <string>

#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>
#include <fastdds/dds/domain/DomainParticipantFactory.hpp>
#include <fastdds/dds/log/Log.hpp>
#include <fastdds/dds/xtypes/common.hpp>
#include <fastdds/dds/xtypes/type_representation/ITypeObjectRegistry.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObject.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObjectUtils.hpp>

#include "SetParametersResult.hpp"


using namespace eprosima::fastdds::dds::xtypes;

namespace rcl_interfaces {
namespace msg {
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_SetParametersResult_type_identifier(
        TypeIdentifierPair& type_ids_SetParametersResult)
{

    ReturnCode_t return_code_SetParametersResult {eprosima::fastdds::dds::RETCODE_OK};
    return_code_SetParametersResult =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "rcl_interfaces::msg::SetParametersResult", type_ids_SetParametersResult);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_SetParametersResult)
    {
        StructTypeFlag struct_flags_SetParametersResult = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_SetParametersResult = "rcl_interfaces::msg::SetParametersResult";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_SetParametersResult;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_SetParametersResult;
        CompleteTypeDetail detail_SetParametersResult = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_SetParametersResult, ann_custom_SetParametersResult, type_name_SetParametersResult.to_string());
        CompleteStructHeader header_SetParametersResult;
        header_SetParametersResult = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_SetParametersResult);
        CompleteStructMemberSeq member_seq_SetParametersResult;
        {
            TypeIdentifierPair type_ids_successful;
            ReturnCode_t return_code_successful {eprosima::fastdds::dds::RETCODE_OK};
            return_code_successful =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_bool", type_ids_successful);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_successful)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "successful Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_successful = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_successful = 0x00000000;
            bool common_successful_ec {false};
            CommonStructMember common_successful {TypeObjectUtils::build_common_struct_member(member_id_successful, member_flags_successful, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_successful, common_successful_ec))};
            if (!common_successful_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure successful member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_successful = "successful";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_successful;
            ann_custom_SetParametersResult.reset();
            CompleteMemberDetail detail_successful = TypeObjectUtils::build_complete_member_detail(name_successful, member_ann_builtin_successful, ann_custom_SetParametersResult);
            CompleteStructMember member_successful = TypeObjectUtils::build_complete_struct_member(common_successful, detail_successful);
            TypeObjectUtils::add_complete_struct_member(member_seq_SetParametersResult, member_successful);
        }
        {
            TypeIdentifierPair type_ids_reason;
            ReturnCode_t return_code_reason {eprosima::fastdds::dds::RETCODE_OK};
            return_code_reason =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_reason);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_reason)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_reason))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_reason = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_reason = 0x00000001;
            bool common_reason_ec {false};
            CommonStructMember common_reason {TypeObjectUtils::build_common_struct_member(member_id_reason, member_flags_reason, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_reason, common_reason_ec))};
            if (!common_reason_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure reason member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_reason = "reason";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_reason;
            ann_custom_SetParametersResult.reset();
            CompleteMemberDetail detail_reason = TypeObjectUtils::build_complete_member_detail(name_reason, member_ann_builtin_reason, ann_custom_SetParametersResult);
            CompleteStructMember member_reason = TypeObjectUtils::build_complete_struct_member(common_reason, detail_reason);
            TypeObjectUtils::add_complete_struct_member(member_seq_SetParametersResult, member_reason);
        }
        CompleteStructType struct_type_SetParametersResult = TypeObjectUtils::build_complete_struct_type(struct_flags_SetParametersResult, header_SetParametersResult, member_seq_SetParametersResult);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_SetParametersResult, type_name_SetParametersResult.to_string(), type_ids_SetParametersResult))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "rcl_interfaces::msg::SetParametersResult already registered in TypeObjectRegistry for a different type.");
        }
    }
}

} // namespace msg

} // namespace rcl_interfaces

