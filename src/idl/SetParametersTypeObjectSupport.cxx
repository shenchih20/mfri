// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file SetParametersTypeObjectSupport.cxx
 * Source file containing the implementation to register the TypeObject representation of the described types in the IDL file
 *
 * This file was generated by the tool fastddsgen.
 */

#include "SetParametersTypeObjectSupport.hpp"

#include <mutex>
#include <string>

#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>
#include <fastdds/dds/domain/DomainParticipantFactory.hpp>
#include <fastdds/dds/log/Log.hpp>
#include <fastdds/dds/xtypes/common.hpp>
#include <fastdds/dds/xtypes/type_representation/ITypeObjectRegistry.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObject.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObjectUtils.hpp>

#include "SetParameters.hpp"

#include "Parameter.hpp"
#include "SetParametersResult.hpp"

using namespace eprosima::fastdds::dds::xtypes;

namespace rcl_interfaces {
namespace srv {
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_SetParameters_Request_type_identifier(
        TypeIdentifierPair& type_ids_SetParameters_Request)
{

    ReturnCode_t return_code_SetParameters_Request {eprosima::fastdds::dds::RETCODE_OK};
    return_code_SetParameters_Request =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "rcl_interfaces::srv::SetParameters_Request", type_ids_SetParameters_Request);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_SetParameters_Request)
    {
        StructTypeFlag struct_flags_SetParameters_Request = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_SetParameters_Request = "rcl_interfaces::srv::SetParameters_Request";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_SetParameters_Request;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_SetParameters_Request;
        CompleteTypeDetail detail_SetParameters_Request = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_SetParameters_Request, ann_custom_SetParameters_Request, type_name_SetParameters_Request.to_string());
        CompleteStructHeader header_SetParameters_Request;
        header_SetParameters_Request = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_SetParameters_Request);
        CompleteStructMemberSeq member_seq_SetParameters_Request;
        {
            TypeIdentifierPair type_ids_parameters;
            ReturnCode_t return_code_parameters {eprosima::fastdds::dds::RETCODE_OK};
            return_code_parameters =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_sequence_rcl_interfaces_msg_Parameter_unbounded", type_ids_parameters);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_parameters)
            {
                return_code_parameters =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "rcl_interfaces::msg::Parameter", type_ids_parameters);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_parameters)
                {
                    rcl_interfaces::msg::register_Parameter_type_identifier(type_ids_parameters);
                }
                bool element_identifier_anonymous_sequence_rcl_interfaces_msg_Parameter_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_sequence_rcl_interfaces_msg_Parameter_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_parameters, element_identifier_anonymous_sequence_rcl_interfaces_msg_Parameter_unbounded_ec))};
                if (!element_identifier_anonymous_sequence_rcl_interfaces_msg_Parameter_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Sequence element TypeIdentifier inconsistent.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_sequence_rcl_interfaces_msg_Parameter_unbounded = EK_COMPLETE;
                if (TK_NONE == type_ids_parameters.type_identifier2()._d())
                {
                    equiv_kind_anonymous_sequence_rcl_interfaces_msg_Parameter_unbounded = EK_BOTH;
                }
                CollectionElementFlag element_flags_anonymous_sequence_rcl_interfaces_msg_Parameter_unbounded = 0;
                PlainCollectionHeader header_anonymous_sequence_rcl_interfaces_msg_Parameter_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_sequence_rcl_interfaces_msg_Parameter_unbounded, element_flags_anonymous_sequence_rcl_interfaces_msg_Parameter_unbounded);
                {
                    SBound bound = 0;
                    PlainSequenceSElemDefn seq_sdefn = TypeObjectUtils::build_plain_sequence_s_elem_defn(header_anonymous_sequence_rcl_interfaces_msg_Parameter_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_rcl_interfaces_msg_Parameter_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_sequence_type_identifier(seq_sdefn, "anonymous_sequence_rcl_interfaces_msg_Parameter_unbounded", type_ids_parameters))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_rcl_interfaces_msg_Parameter_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_parameters = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_parameters = 0x00000000;
            bool common_parameters_ec {false};
            CommonStructMember common_parameters {TypeObjectUtils::build_common_struct_member(member_id_parameters, member_flags_parameters, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_parameters, common_parameters_ec))};
            if (!common_parameters_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure parameters member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_parameters = "parameters";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_parameters;
            ann_custom_SetParameters_Request.reset();
            CompleteMemberDetail detail_parameters = TypeObjectUtils::build_complete_member_detail(name_parameters, member_ann_builtin_parameters, ann_custom_SetParameters_Request);
            CompleteStructMember member_parameters = TypeObjectUtils::build_complete_struct_member(common_parameters, detail_parameters);
            TypeObjectUtils::add_complete_struct_member(member_seq_SetParameters_Request, member_parameters);
        }
        CompleteStructType struct_type_SetParameters_Request = TypeObjectUtils::build_complete_struct_type(struct_flags_SetParameters_Request, header_SetParameters_Request, member_seq_SetParameters_Request);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_SetParameters_Request, type_name_SetParameters_Request.to_string(), type_ids_SetParameters_Request))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "rcl_interfaces::srv::SetParameters_Request already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_SetParameters_Response_type_identifier(
        TypeIdentifierPair& type_ids_SetParameters_Response)
{

    ReturnCode_t return_code_SetParameters_Response {eprosima::fastdds::dds::RETCODE_OK};
    return_code_SetParameters_Response =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "rcl_interfaces::srv::SetParameters_Response", type_ids_SetParameters_Response);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_SetParameters_Response)
    {
        StructTypeFlag struct_flags_SetParameters_Response = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_SetParameters_Response = "rcl_interfaces::srv::SetParameters_Response";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_SetParameters_Response;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_SetParameters_Response;
        CompleteTypeDetail detail_SetParameters_Response = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_SetParameters_Response, ann_custom_SetParameters_Response, type_name_SetParameters_Response.to_string());
        CompleteStructHeader header_SetParameters_Response;
        header_SetParameters_Response = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_SetParameters_Response);
        CompleteStructMemberSeq member_seq_SetParameters_Response;
        {
            TypeIdentifierPair type_ids_results;
            ReturnCode_t return_code_results {eprosima::fastdds::dds::RETCODE_OK};
            return_code_results =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_sequence_rcl_interfaces_msg_SetParametersResult_unbounded", type_ids_results);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_results)
            {
                return_code_results =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "rcl_interfaces::msg::SetParametersResult", type_ids_results);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_results)
                {
                    rcl_interfaces::msg::register_SetParametersResult_type_identifier(type_ids_results);
                }
                bool element_identifier_anonymous_sequence_rcl_interfaces_msg_SetParametersResult_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_sequence_rcl_interfaces_msg_SetParametersResult_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_results, element_identifier_anonymous_sequence_rcl_interfaces_msg_SetParametersResult_unbounded_ec))};
                if (!element_identifier_anonymous_sequence_rcl_interfaces_msg_SetParametersResult_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Sequence element TypeIdentifier inconsistent.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_sequence_rcl_interfaces_msg_SetParametersResult_unbounded = EK_COMPLETE;
                if (TK_NONE == type_ids_results.type_identifier2()._d())
                {
                    equiv_kind_anonymous_sequence_rcl_interfaces_msg_SetParametersResult_unbounded = EK_BOTH;
                }
                CollectionElementFlag element_flags_anonymous_sequence_rcl_interfaces_msg_SetParametersResult_unbounded = 0;
                PlainCollectionHeader header_anonymous_sequence_rcl_interfaces_msg_SetParametersResult_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_sequence_rcl_interfaces_msg_SetParametersResult_unbounded, element_flags_anonymous_sequence_rcl_interfaces_msg_SetParametersResult_unbounded);
                {
                    SBound bound = 0;
                    PlainSequenceSElemDefn seq_sdefn = TypeObjectUtils::build_plain_sequence_s_elem_defn(header_anonymous_sequence_rcl_interfaces_msg_SetParametersResult_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_rcl_interfaces_msg_SetParametersResult_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_sequence_type_identifier(seq_sdefn, "anonymous_sequence_rcl_interfaces_msg_SetParametersResult_unbounded", type_ids_results))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_rcl_interfaces_msg_SetParametersResult_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_results = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_results = 0x00000000;
            bool common_results_ec {false};
            CommonStructMember common_results {TypeObjectUtils::build_common_struct_member(member_id_results, member_flags_results, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_results, common_results_ec))};
            if (!common_results_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure results member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_results = "results";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_results;
            ann_custom_SetParameters_Response.reset();
            CompleteMemberDetail detail_results = TypeObjectUtils::build_complete_member_detail(name_results, member_ann_builtin_results, ann_custom_SetParameters_Response);
            CompleteStructMember member_results = TypeObjectUtils::build_complete_struct_member(common_results, detail_results);
            TypeObjectUtils::add_complete_struct_member(member_seq_SetParameters_Response, member_results);
        }
        CompleteStructType struct_type_SetParameters_Response = TypeObjectUtils::build_complete_struct_type(struct_flags_SetParameters_Response, header_SetParameters_Response, member_seq_SetParameters_Response);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_SetParameters_Response, type_name_SetParameters_Response.to_string(), type_ids_SetParameters_Response))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "rcl_interfaces::srv::SetParameters_Response already registered in TypeObjectRegistry for a different type.");
        }
    }
}

} // namespace srv

} // namespace rcl_interfaces

