// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file AddTwoInts_ResponseTypeObjectSupport.cxx
 * Source file containing the implementation to register the TypeObject representation of the described types in the IDL file
 *
 * This file was generated by the tool fastddsgen.
 */

#include "AddTwoInts_ResponseTypeObjectSupport.hpp"

#include <mutex>
#include <string>

#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>
#include <fastdds/dds/domain/DomainParticipantFactory.hpp>
#include <fastdds/dds/log/Log.hpp>
#include <fastdds/dds/xtypes/common.hpp>
#include <fastdds/dds/xtypes/type_representation/ITypeObjectRegistry.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObject.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObjectUtils.hpp>

#include "AddTwoInts_Response.hpp"


using namespace eprosima::fastdds::dds::xtypes;

namespace example_interfaces {
namespace srv {
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_AddTwoInts_Response_type_identifier(
        TypeIdentifierPair& type_ids_AddTwoInts_Response)
{

    ReturnCode_t return_code_AddTwoInts_Response {eprosima::fastdds::dds::RETCODE_OK};
    return_code_AddTwoInts_Response =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "example_interfaces::srv::AddTwoInts_Response", type_ids_AddTwoInts_Response);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_AddTwoInts_Response)
    {
        StructTypeFlag struct_flags_AddTwoInts_Response = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_AddTwoInts_Response = "example_interfaces::srv::AddTwoInts_Response";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_AddTwoInts_Response;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_AddTwoInts_Response;
        CompleteTypeDetail detail_AddTwoInts_Response = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_AddTwoInts_Response, ann_custom_AddTwoInts_Response, type_name_AddTwoInts_Response.to_string());
        CompleteStructHeader header_AddTwoInts_Response;
        header_AddTwoInts_Response = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_AddTwoInts_Response);
        CompleteStructMemberSeq member_seq_AddTwoInts_Response;
        {
            TypeIdentifierPair type_ids_sum;
            ReturnCode_t return_code_sum {eprosima::fastdds::dds::RETCODE_OK};
            return_code_sum =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int64_t", type_ids_sum);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_sum)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "sum Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_sum = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_sum = 0x00000000;
            bool common_sum_ec {false};
            CommonStructMember common_sum {TypeObjectUtils::build_common_struct_member(member_id_sum, member_flags_sum, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_sum, common_sum_ec))};
            if (!common_sum_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure sum member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_sum = "sum";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_sum;
            ann_custom_AddTwoInts_Response.reset();
            CompleteMemberDetail detail_sum = TypeObjectUtils::build_complete_member_detail(name_sum, member_ann_builtin_sum, ann_custom_AddTwoInts_Response);
            CompleteStructMember member_sum = TypeObjectUtils::build_complete_struct_member(common_sum, detail_sum);
            TypeObjectUtils::add_complete_struct_member(member_seq_AddTwoInts_Response, member_sum);
        }
        CompleteStructType struct_type_AddTwoInts_Response = TypeObjectUtils::build_complete_struct_type(struct_flags_AddTwoInts_Response, header_AddTwoInts_Response, member_seq_AddTwoInts_Response);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_AddTwoInts_Response, type_name_AddTwoInts_Response.to_string(), type_ids_AddTwoInts_Response))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "example_interfaces::srv::AddTwoInts_Response already registered in TypeObjectRegistry for a different type.");
        }
    }
}

} // namespace srv

} // namespace example_interfaces

